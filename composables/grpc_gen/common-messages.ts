// @generated by protobuf-ts 2.9.0 with parameter optimize_code_size
// @generated from protobuf file "common-messages.proto" (syntax proto3)
// tslint:disable
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message Empty
 */
export interface Empty {
}
/**
 * @generated from protobuf message AccountInfo
 */
export interface AccountInfo {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string; // length=1-40
    /**
     * @generated from protobuf field: string mail = 2;
     */
    mail: string; // Is a valid mail format, max length=60
    /**
     * @generated from protobuf field: string telegramUsername = 3;
     */
    telegramUsername: string; // Valid format, without '@'
}
/**
 * @generated from protobuf message ProfilePic
 */
export interface ProfilePic {
    /**
     * @generated from protobuf field: optional bytes image = 1;
     */
    image?: Uint8Array; // Valid AVIF image, max size = 512kb
}
/**
 * The book is available and valid
 *
 * @generated from protobuf message Booking
 */
export interface Booking {
    /**
     * @generated from protobuf field: BedId bedId = 1;
     */
    bedId?: BedId;
    /**
     * @generated from protobuf field: DateInterval dateInterval = 2;
     */
    dateInterval?: DateInterval;
}
// message BookingInfo { // Is valid
//    Booking booking = 1;
//    string bookingCode = 3; // length = 6
//    string hostPublicKey = 4; // in hexadecimal, start with 0x, valid (corresponding account exist)
//    string guestPublicKey = 5; // in hexadecimal, start with 0x, valid (corresponding account exist)
// }
// message BookingInfoList{
//    repeated BookingInfo bookingInfos = 1;
// }

/**
 * @generated from protobuf message BookingAvailability
 */
export interface BookingAvailability {
    /**
     * @generated from protobuf field: BedId bedId = 1;
     */
    bedId?: BedId;
    /**
     * @generated from protobuf field: DateInterval dateInterval = 2;
     */
    dateInterval?: DateInterval;
}
/**
 * @generated from protobuf message BedMutableInfo
 */
export interface BedMutableInfo {
    /**
     * @generated from protobuf field: string address = 1;
     */
    address: string; // length=1-100. Maximum sensitive (aka it search the exact string)
    /**
     * @generated from protobuf field: Coordinates coordinates = 2;
     */
    coordinates?: Coordinates;
    /**
     * @generated from protobuf field: repeated bytes images = 3;
     */
    images: Uint8Array[]; // Valid 1-5 AVIF images, max size = 512kb
    /**
     * @generated from protobuf field: string description = 4;
     */
    description: string; // length=0-200
    /**
     * @generated from protobuf field: repeated Feature features = 5;
     */
    features: Feature[]; // Distinct
    /**
     * @generated from protobuf field: uint32 minimumDaysNotice = 6;
     */
    minimumDaysNotice: number; //  min = 1, max = 30
}
/**
 * @generated from protobuf message Bed
 */
export interface Bed {
    /**
     * @generated from protobuf field: BedId id = 1;
     */
    id?: BedId;
    /**
     * @generated from protobuf field: string hostPublicKey = 2;
     */
    hostPublicKey: string; // in hexadecimal, start with 0x, valid (corresponding account exist)
    /**
     * @generated from protobuf field: string hostTelegramUsername = 3;
     */
    hostTelegramUsername: string;
    /**
     * @generated from protobuf field: BedMutableInfo bedMutableInfo = 4;
     */
    bedMutableInfo?: BedMutableInfo;
    /**
     * @generated from protobuf field: repeated Date dateAvailables = 5;
     */
    dateAvailables: Date[]; // 0-90 .  Refers to the night between the date and the next day. It's valid. Every date is > today. Max date is today + 90 days
    /**
     * @generated from protobuf field: uint32 reviewCount = 6;
     */
    reviewCount: number;
    /**
     * @generated from protobuf field: optional uint32 averageEvaluation = 7;
     */
    averageEvaluation?: number; // min = 0, max = 50. For example 42 is evaluated as 4.2. Not set if and only if reviewCount is 0
}
/**
 * @generated from protobuf message BedList
 */
export interface BedList {
    /**
     * @generated from protobuf field: repeated Bed beds = 1;
     */
    beds: Bed[];
}
/**
 * @generated from protobuf message BedId
 */
export interface BedId {
    /**
     * @generated from protobuf field: string bedId = 1;
     */
    bedId: string; // Not empty. Is valid (exist)
}
/**
 * @generated from protobuf message Review
 */
export interface Review {
    /**
     * @generated from protobuf field: uint32 evaluation = 1;
     */
    evaluation: number; // min = 0, max = 50. For example 42 is evaluated as 4.2
    /**
     * @generated from protobuf field: string comment = 2;
     */
    comment: string; // length=0-200
}
/**
 * @generated from protobuf message Date
 */
export interface Date {
    /**
     * @generated from protobuf field: uint32 day = 1;
     */
    day: number;
    /**
     * @generated from protobuf field: uint32 month = 2;
     */
    month: number;
    /**
     * @generated from protobuf field: uint32 year = 3;
     */
    year: number;
}
/**
 * @generated from protobuf message DateInterval
 */
export interface DateInterval {
    /**
     * @generated from protobuf field: Date startDate = 1;
     */
    startDate?: Date; // Refers to the night between the date and the next day. >= startDate
    /**
     * @generated from protobuf field: Date endDate = 2;
     */
    endDate?: Date; // Refers to the night between the date and the next day. >= startDate
}
/**
 * @generated from protobuf message Coordinates
 */
export interface Coordinates {
    /**
     * @generated from protobuf field: double latitude = 1;
     */
    latitude: number; // range: [-90, 90]
    /**
     * @generated from protobuf field: double longitude = 2;
     */
    longitude: number; // range: [-180, 180]
}
/**
 * @generated from protobuf enum Feature
 */
export enum Feature {
    /**
     * @generated from protobuf enum value: internetConnection = 0;
     */
    internetConnection = 0,
    /**
     * @generated from protobuf enum value: bathroom = 1;
     */
    bathroom = 1,
    /**
     * @generated from protobuf enum value: heating = 2;
     */
    heating = 2,
    /**
     * @generated from protobuf enum value: airConditioner = 3;
     */
    airConditioner = 3,
    /**
     * @generated from protobuf enum value: electricalOutlet = 4;
     */
    electricalOutlet = 4,
    /**
     * @generated from protobuf enum value: tap = 5;
     */
    tap = 5,
    /**
     * @generated from protobuf enum value: bedLinens = 6;
     */
    bedLinens = 6,
    /**
     * @generated from protobuf enum value: pillows = 7;
     */
    pillows = 7
}
// @generated message type with reflection information, may provide speed optimized methods
class Empty$Type extends MessageType<Empty> {
    constructor() {
        super("Empty", []);
    }
}
/**
 * @generated MessageType for protobuf message Empty
 */
export const Empty = new Empty$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AccountInfo$Type extends MessageType<AccountInfo> {
    constructor() {
        super("AccountInfo", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "mail", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "telegramUsername", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message AccountInfo
 */
export const AccountInfo = new AccountInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProfilePic$Type extends MessageType<ProfilePic> {
    constructor() {
        super("ProfilePic", [
            { no: 1, name: "image", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message ProfilePic
 */
export const ProfilePic = new ProfilePic$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Booking$Type extends MessageType<Booking> {
    constructor() {
        super("Booking", [
            { no: 1, name: "bedId", kind: "message", T: () => BedId },
            { no: 2, name: "dateInterval", kind: "message", T: () => DateInterval }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message Booking
 */
export const Booking = new Booking$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BookingAvailability$Type extends MessageType<BookingAvailability> {
    constructor() {
        super("BookingAvailability", [
            { no: 1, name: "bedId", kind: "message", T: () => BedId },
            { no: 2, name: "dateInterval", kind: "message", T: () => DateInterval }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message BookingAvailability
 */
export const BookingAvailability = new BookingAvailability$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BedMutableInfo$Type extends MessageType<BedMutableInfo> {
    constructor() {
        super("BedMutableInfo", [
            { no: 1, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "coordinates", kind: "message", T: () => Coordinates },
            { no: 3, name: "images", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ },
            { no: 4, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "features", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["Feature", Feature] },
            { no: 6, name: "minimumDaysNotice", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message BedMutableInfo
 */
export const BedMutableInfo = new BedMutableInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Bed$Type extends MessageType<Bed> {
    constructor() {
        super("Bed", [
            { no: 1, name: "id", kind: "message", T: () => BedId },
            { no: 2, name: "hostPublicKey", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "hostTelegramUsername", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "bedMutableInfo", kind: "message", T: () => BedMutableInfo },
            { no: 5, name: "dateAvailables", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Date },
            { no: 6, name: "reviewCount", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "averageEvaluation", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message Bed
 */
export const Bed = new Bed$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BedList$Type extends MessageType<BedList> {
    constructor() {
        super("BedList", [
            { no: 1, name: "beds", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Bed }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message BedList
 */
export const BedList = new BedList$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BedId$Type extends MessageType<BedId> {
    constructor() {
        super("BedId", [
            { no: 1, name: "bedId", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message BedId
 */
export const BedId = new BedId$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Review$Type extends MessageType<Review> {
    constructor() {
        super("Review", [
            { no: 1, name: "evaluation", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "comment", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message Review
 */
export const Review = new Review$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Date$Type extends MessageType<Date> {
    constructor() {
        super("Date", [
            { no: 1, name: "day", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "month", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "year", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message Date
 */
export const Date = new Date$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DateInterval$Type extends MessageType<DateInterval> {
    constructor() {
        super("DateInterval", [
            { no: 1, name: "startDate", kind: "message", T: () => Date },
            { no: 2, name: "endDate", kind: "message", T: () => Date }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message DateInterval
 */
export const DateInterval = new DateInterval$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Coordinates$Type extends MessageType<Coordinates> {
    constructor() {
        super("Coordinates", [
            { no: 1, name: "latitude", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 2, name: "longitude", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message Coordinates
 */
export const Coordinates = new Coordinates$Type();
