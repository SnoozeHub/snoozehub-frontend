// @generated by protobuf-ts 2.9.0 with parameter optimize_code_size
// @generated from protobuf file "public-service.proto" (syntax proto3)
// tslint:disable
import { BedList } from "./common-messages";
import { Empty } from "./common-messages";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { MessageType } from "@protobuf-ts/runtime";
import { Bed } from "./common-messages";
import { Review } from "./common-messages";
import { BedId } from "./common-messages";
import { Feature } from "./common-messages";
import { Coordinates } from "./common-messages";
import { Date } from "./common-messages";
/**
 * @generated from protobuf message GetNonceResponse
 */
export interface GetNonceResponse {
    /**
     * @generated from protobuf field: string nonce = 1;
     */
    nonce: string; // Not empty
}
/**
 * @generated from protobuf message AuthRequest
 */
export interface AuthRequest {
    /**
     * @generated from protobuf field: string nonce = 1;
     */
    nonce: string; // Valid format
    /**
     * @generated from protobuf field: bytes signedNonce = 2;
     */
    signedNonce: Uint8Array; // it follows personal_sign metamask standard . Valid format
}
/**
 * @generated from protobuf message AuthResponse
 */
export interface AuthResponse {
    /**
     * Every token has an expiration time of 24 hours
     *
     * @generated from protobuf field: string authToken = 1;
     */
    authToken: string; // Not empty
    /**
     * @generated from protobuf field: bool accountExist = 2;
     */
    accountExist: boolean;
}
/**
 * BedList returned will include only beds which has at least 1 date available in the range [dateRangeLow, dateRangeHigh]
 *
 * @generated from protobuf message GetBedsRequest
 */
export interface GetBedsRequest {
    /**
     * @generated from protobuf field: Date dateRangeLow = 1;
     */
    dateRangeLow?: Date; // It's valid. > today (aka from tomorrow)
    /**
     * @generated from protobuf field: Date dateRangeHigh = 2;
     */
    dateRangeHigh?: Date; // It's valid. dateRangeHigh >= dateRangeLow
    /**
     * @generated from protobuf field: Coordinates coordinates = 3;
     */
    coordinates?: Coordinates; // 
    /**
     * @generated from protobuf field: repeated Feature featuresMandatory = 4;
     */
    featuresMandatory: Feature[]; // All features are distinct
    /**
     * Get first 0-N results in order by proximity (using the coordinates) from fromIndex to max fromIndex+N where N=15.
     *
     * @generated from protobuf field: uint32 fromIndex = 5;
     */
    fromIndex: number;
}
/**
 * @generated from protobuf message GetReviewsRequest
 */
export interface GetReviewsRequest {
    /**
     * @generated from protobuf field: BedId bedId = 1;
     */
    bedId?: BedId;
    /**
     * Get first 0-N results (oder is not specified) from fromIndex to max fromIndex+N where N=4.
     *
     * @generated from protobuf field: uint32 fromIndex = 2;
     */
    fromIndex: number;
}
/**
 * @generated from protobuf message GetReviewsResponse
 */
export interface GetReviewsResponse {
    /**
     * @generated from protobuf field: repeated Review reviews = 1;
     */
    reviews: Review[]; // 0-4 reviews. The field comment is mandatory
}
/**
 * @generated from protobuf message GetBedResponse
 */
export interface GetBedResponse {
    /**
     * @generated from protobuf field: optional Bed bed = 1;
     */
    bed?: Bed; // Not set only if the bed with the requested id doesn't exist
}
// @generated message type with reflection information, may provide speed optimized methods
class GetNonceResponse$Type extends MessageType<GetNonceResponse> {
    constructor() {
        super("GetNonceResponse", [
            { no: 1, name: "nonce", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message GetNonceResponse
 */
export const GetNonceResponse = new GetNonceResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AuthRequest$Type extends MessageType<AuthRequest> {
    constructor() {
        super("AuthRequest", [
            { no: 1, name: "nonce", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "signedNonce", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message AuthRequest
 */
export const AuthRequest = new AuthRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AuthResponse$Type extends MessageType<AuthResponse> {
    constructor() {
        super("AuthResponse", [
            { no: 1, name: "authToken", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "accountExist", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message AuthResponse
 */
export const AuthResponse = new AuthResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetBedsRequest$Type extends MessageType<GetBedsRequest> {
    constructor() {
        super("GetBedsRequest", [
            { no: 1, name: "dateRangeLow", kind: "message", T: () => Date },
            { no: 2, name: "dateRangeHigh", kind: "message", T: () => Date },
            { no: 3, name: "coordinates", kind: "message", T: () => Coordinates },
            { no: 4, name: "featuresMandatory", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["Feature", Feature] },
            { no: 5, name: "fromIndex", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message GetBedsRequest
 */
export const GetBedsRequest = new GetBedsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetReviewsRequest$Type extends MessageType<GetReviewsRequest> {
    constructor() {
        super("GetReviewsRequest", [
            { no: 1, name: "bedId", kind: "message", T: () => BedId },
            { no: 2, name: "fromIndex", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message GetReviewsRequest
 */
export const GetReviewsRequest = new GetReviewsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetReviewsResponse$Type extends MessageType<GetReviewsResponse> {
    constructor() {
        super("GetReviewsResponse", [
            { no: 1, name: "reviews", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Review }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message GetReviewsResponse
 */
export const GetReviewsResponse = new GetReviewsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetBedResponse$Type extends MessageType<GetBedResponse> {
    constructor() {
        super("GetBedResponse", [
            { no: 1, name: "bed", kind: "message", T: () => Bed }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message GetBedResponse
 */
export const GetBedResponse = new GetBedResponse$Type();
/**
 * @generated ServiceType for protobuf service PublicService
 */
export const PublicService = new ServiceType("PublicService", [
    { name: "GetNonce", options: {}, I: Empty, O: GetNonceResponse },
    { name: "Auth", options: {}, I: AuthRequest, O: AuthResponse },
    { name: "GetBeds", options: {}, I: GetBedsRequest, O: BedList },
    { name: "GetBed", options: {}, I: BedId, O: GetBedResponse },
    { name: "GetReviews", options: {}, I: GetReviewsRequest, O: GetReviewsResponse }
]);
