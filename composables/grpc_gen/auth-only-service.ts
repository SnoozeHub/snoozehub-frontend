// @generated by protobuf-ts 2.9.0 with parameter optimize_code_size
// @generated from protobuf file "auth-only-service.proto" (syntax proto3)
// tslint:disable
import { BookingAvailability } from "./common-messages";
import { BedList } from "./common-messages";
import { Booking } from "./common-messages";
import { ProfilePic } from "./common-messages";
import { Empty } from "./common-messages";
import { AccountInfo } from "./common-messages";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { MessageType } from "@protobuf-ts/runtime";
import { Review } from "./common-messages";
import { BedMutableInfo } from "./common-messages";
import { BedId } from "./common-messages";
/**
 * @generated from protobuf message VerifyMailRequest
 */
export interface VerifyMailRequest {
    /**
     * @generated from protobuf field: string verificationCode = 1;
     */
    verificationCode: string; // 6 digit numbers
}
/**
 * @generated from protobuf message VerifyMailResponse
 */
export interface VerifyMailResponse {
    /**
     * @generated from protobuf field: bool ok = 1;
     */
    ok: boolean;
}
/**
 * @generated from protobuf message BookResponse
 */
export interface BookResponse {
    /**
     * If true: client can pay, else the booking is locked
     *
     * @generated from protobuf field: bool isBookingUnlocked = 1;
     */
    isBookingUnlocked: boolean;
}
/**
 * @generated from protobuf message ModifyBedRequest
 */
export interface ModifyBedRequest {
    /**
     * @generated from protobuf field: BedId bedId = 1;
     */
    bedId?: BedId;
    /**
     * @generated from protobuf field: BedMutableInfo bedMutableInfo = 2;
     */
    bedMutableInfo?: BedMutableInfo;
}
/**
 * @generated from protobuf message ReviewRequest
 */
export interface ReviewRequest {
    /**
     * @generated from protobuf field: BedId bedId = 1;
     */
    bedId?: BedId;
    /**
     * @generated from protobuf field: Review review = 2;
     */
    review?: Review;
}
/**
 * @generated from protobuf message GetMyReviewResponse
 */
export interface GetMyReviewResponse {
    /**
     * @generated from protobuf field: optional Review review = 1;
     */
    review?: Review;
}
// @generated message type with reflection information, may provide speed optimized methods
class VerifyMailRequest$Type extends MessageType<VerifyMailRequest> {
    constructor() {
        super("VerifyMailRequest", [
            { no: 1, name: "verificationCode", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message VerifyMailRequest
 */
export const VerifyMailRequest = new VerifyMailRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VerifyMailResponse$Type extends MessageType<VerifyMailResponse> {
    constructor() {
        super("VerifyMailResponse", [
            { no: 1, name: "ok", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message VerifyMailResponse
 */
export const VerifyMailResponse = new VerifyMailResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BookResponse$Type extends MessageType<BookResponse> {
    constructor() {
        super("BookResponse", [
            { no: 1, name: "isBookingUnlocked", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message BookResponse
 */
export const BookResponse = new BookResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ModifyBedRequest$Type extends MessageType<ModifyBedRequest> {
    constructor() {
        super("ModifyBedRequest", [
            { no: 1, name: "bedId", kind: "message", T: () => BedId },
            { no: 2, name: "bedMutableInfo", kind: "message", T: () => BedMutableInfo }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message ModifyBedRequest
 */
export const ModifyBedRequest = new ModifyBedRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReviewRequest$Type extends MessageType<ReviewRequest> {
    constructor() {
        super("ReviewRequest", [
            { no: 1, name: "bedId", kind: "message", T: () => BedId },
            { no: 2, name: "review", kind: "message", T: () => Review }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message ReviewRequest
 */
export const ReviewRequest = new ReviewRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetMyReviewResponse$Type extends MessageType<GetMyReviewResponse> {
    constructor() {
        super("GetMyReviewResponse", [
            { no: 1, name: "review", kind: "message", T: () => Review }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message GetMyReviewResponse
 */
export const GetMyReviewResponse = new GetMyReviewResponse$Type();
/**
 * @generated ServiceType for protobuf service AuthOnlyService
 */
export const AuthOnlyService = new ServiceType("AuthOnlyService", [
    { name: "SignUp", options: {}, I: AccountInfo, O: Empty },
    { name: "logout", options: {}, I: Empty, O: Empty },
    { name: "VerifyMail", options: {}, I: VerifyMailRequest, O: VerifyMailResponse },
    { name: "GetAccountInfo", options: {}, I: Empty, O: AccountInfo },
    { name: "GetProfilePic", options: {}, I: Empty, O: ProfilePic },
    { name: "SetProfilePic", options: {}, I: ProfilePic, O: Empty },
    { name: "DeleteAccount", options: {}, I: Empty, O: Empty },
    { name: "UpdateAccountInfo", options: {}, I: AccountInfo, O: Empty },
    { name: "Book", options: {}, I: Booking, O: BookResponse },
    { name: "Review", options: {}, I: ReviewRequest, O: Empty },
    { name: "GetMyReview", options: {}, I: BedId, O: GetMyReviewResponse },
    { name: "RemoveReview", options: {}, I: BedId, O: Empty },
    { name: "AddBed", options: {}, I: BedMutableInfo, O: Empty },
    { name: "ModifyMyBed", options: {}, I: ModifyBedRequest, O: Empty },
    { name: "RemoveMyBed", options: {}, I: BedId, O: Empty },
    { name: "GetMyBeds", options: {}, I: Empty, O: BedList },
    { name: "AddBookingAvailability", options: {}, I: BookingAvailability, O: Empty },
    { name: "RemoveBookAvailability", options: {}, I: BookingAvailability, O: Empty }
]);
