// @generated by protobuf-ts 2.8.2
// @generated from protobuf file "auth-only-service.proto" (syntax proto3)
// tslint:disable
import { BedList } from "./common-messages";
import { ProfilePic } from "./common-messages";
import { Empty } from "./common-messages";
import { AccountInfo } from "./common-messages";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Review } from "./common-messages";
import { BedMutableInfo } from "./common-messages";
import { BedId } from "./common-messages";
import { Booking } from "./common-messages";
/**
 * @generated from protobuf message VerifyMailRequest
 */
export interface VerifyMailRequest {
    /**
     * @generated from protobuf field: string verificationCode = 1;
     */
    verificationCode: string; // 6 digit numbers
}
/**
 * @generated from protobuf message VerifyMailResponse
 */
export interface VerifyMailResponse {
    /**
     * @generated from protobuf field: bool ok = 1;
     */
    ok: boolean;
}
/**
 * @generated from protobuf message BookResponse
 */
export interface BookResponse {
    /**
     * If true: client can pay, else the booking is locked
     *
     * @generated from protobuf field: bool isBookingUnlocked = 1;
     */
    isBookingUnlocked: boolean;
}
/**
 * @generated from protobuf message GetBookingsResponse
 */
export interface GetBookingsResponse {
    /**
     * @generated from protobuf field: repeated Booking book = 1;
     */
    book: Booking[];
}
/**
 * @generated from protobuf message ModifyBedRequest
 */
export interface ModifyBedRequest {
    /**
     * @generated from protobuf field: BedId bedId = 1;
     */
    bedId?: BedId;
    /**
     * @generated from protobuf field: BedMutableInfo bedMutableInfo = 2;
     */
    bedMutableInfo?: BedMutableInfo;
}
/**
 * @generated from protobuf message ReviewRequest
 */
export interface ReviewRequest {
    /**
     * @generated from protobuf field: BedId bedId = 1;
     */
    bedId?: BedId;
    /**
     * @generated from protobuf field: Review review = 2;
     */
    review?: Review;
}
// @generated message type with reflection information, may provide speed optimized methods
class VerifyMailRequest$Type extends MessageType<VerifyMailRequest> {
    constructor() {
        super("VerifyMailRequest", [
            { no: 1, name: "verificationCode", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<VerifyMailRequest>): VerifyMailRequest {
        const message = { verificationCode: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VerifyMailRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VerifyMailRequest): VerifyMailRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string verificationCode */ 1:
                    message.verificationCode = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VerifyMailRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string verificationCode = 1; */
        if (message.verificationCode !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.verificationCode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message VerifyMailRequest
 */
export const VerifyMailRequest = new VerifyMailRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VerifyMailResponse$Type extends MessageType<VerifyMailResponse> {
    constructor() {
        super("VerifyMailResponse", [
            { no: 1, name: "ok", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<VerifyMailResponse>): VerifyMailResponse {
        const message = { ok: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VerifyMailResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VerifyMailResponse): VerifyMailResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool ok */ 1:
                    message.ok = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VerifyMailResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool ok = 1; */
        if (message.ok !== false)
            writer.tag(1, WireType.Varint).bool(message.ok);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message VerifyMailResponse
 */
export const VerifyMailResponse = new VerifyMailResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BookResponse$Type extends MessageType<BookResponse> {
    constructor() {
        super("BookResponse", [
            { no: 1, name: "isBookingUnlocked", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<BookResponse>): BookResponse {
        const message = { isBookingUnlocked: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BookResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BookResponse): BookResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool isBookingUnlocked */ 1:
                    message.isBookingUnlocked = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BookResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool isBookingUnlocked = 1; */
        if (message.isBookingUnlocked !== false)
            writer.tag(1, WireType.Varint).bool(message.isBookingUnlocked);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message BookResponse
 */
export const BookResponse = new BookResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetBookingsResponse$Type extends MessageType<GetBookingsResponse> {
    constructor() {
        super("GetBookingsResponse", [
            { no: 1, name: "book", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Booking }
        ]);
    }
    create(value?: PartialMessage<GetBookingsResponse>): GetBookingsResponse {
        const message = { book: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetBookingsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetBookingsResponse): GetBookingsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated Booking book */ 1:
                    message.book.push(Booking.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetBookingsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated Booking book = 1; */
        for (let i = 0; i < message.book.length; i++)
            Booking.internalBinaryWrite(message.book[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetBookingsResponse
 */
export const GetBookingsResponse = new GetBookingsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ModifyBedRequest$Type extends MessageType<ModifyBedRequest> {
    constructor() {
        super("ModifyBedRequest", [
            { no: 1, name: "bedId", kind: "message", T: () => BedId },
            { no: 2, name: "bedMutableInfo", kind: "message", T: () => BedMutableInfo }
        ]);
    }
    create(value?: PartialMessage<ModifyBedRequest>): ModifyBedRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ModifyBedRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ModifyBedRequest): ModifyBedRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* BedId bedId */ 1:
                    message.bedId = BedId.internalBinaryRead(reader, reader.uint32(), options, message.bedId);
                    break;
                case /* BedMutableInfo bedMutableInfo */ 2:
                    message.bedMutableInfo = BedMutableInfo.internalBinaryRead(reader, reader.uint32(), options, message.bedMutableInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ModifyBedRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* BedId bedId = 1; */
        if (message.bedId)
            BedId.internalBinaryWrite(message.bedId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* BedMutableInfo bedMutableInfo = 2; */
        if (message.bedMutableInfo)
            BedMutableInfo.internalBinaryWrite(message.bedMutableInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ModifyBedRequest
 */
export const ModifyBedRequest = new ModifyBedRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReviewRequest$Type extends MessageType<ReviewRequest> {
    constructor() {
        super("ReviewRequest", [
            { no: 1, name: "bedId", kind: "message", T: () => BedId },
            { no: 2, name: "review", kind: "message", T: () => Review }
        ]);
    }
    create(value?: PartialMessage<ReviewRequest>): ReviewRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ReviewRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReviewRequest): ReviewRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* BedId bedId */ 1:
                    message.bedId = BedId.internalBinaryRead(reader, reader.uint32(), options, message.bedId);
                    break;
                case /* Review review */ 2:
                    message.review = Review.internalBinaryRead(reader, reader.uint32(), options, message.review);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReviewRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* BedId bedId = 1; */
        if (message.bedId)
            BedId.internalBinaryWrite(message.bedId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* Review review = 2; */
        if (message.review)
            Review.internalBinaryWrite(message.review, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ReviewRequest
 */
export const ReviewRequest = new ReviewRequest$Type();
/**
 * @generated ServiceType for protobuf service AuthOnlyService
 */
export const AuthOnlyService = new ServiceType("AuthOnlyService", [
    { name: "SignUp", options: {}, I: AccountInfo, O: Empty },
    { name: "VerifyMail", options: {}, I: VerifyMailRequest, O: VerifyMailResponse },
    { name: "GetAccountInfo", options: {}, I: Empty, O: AccountInfo },
    { name: "GetProfilePic", options: {}, I: Empty, O: ProfilePic },
    { name: "SetProfilePic", options: {}, I: ProfilePic, O: Empty },
    { name: "DeleteAccount", options: {}, I: Empty, O: Empty },
    { name: "UpdateAccountInfo", options: {}, I: AccountInfo, O: Empty },
    { name: "Book", options: {}, I: Booking, O: BookResponse },
    { name: "GetMyBookings", options: {}, I: Empty, O: GetBookingsResponse },
    { name: "Review", options: {}, I: ReviewRequest, O: Empty },
    { name: "RemoveReview", options: {}, I: BedId, O: Empty },
    { name: "AddBed", options: {}, I: BedMutableInfo, O: Empty },
    { name: "ModifyMyBed", options: {}, I: ModifyBedRequest, O: Empty },
    { name: "RemoveMyBed", options: {}, I: BedId, O: Empty },
    { name: "GetMyBeds", options: {}, I: Empty, O: BedList },
    { name: "AddBookingAvaiability", options: {}, I: Booking, O: Empty },
    { name: "RemoveBookAvaiability", options: {}, I: Booking, O: Empty }
]);
